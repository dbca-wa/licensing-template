# Generated by Django 3.2.4 on 2021-12-08 09:09

import ckeditor.fields
import dirtyfields.dirtyfields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import licensing_template.components.approvals.models
import licensing_template.components.compliances.models
import licensing_template.components.organisations.models
import licensing_template.components.proposals.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AmendmentReason",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.CharField(max_length=125, verbose_name="Reason")),
            ],
            options={
                "verbose_name": "Application Amendment Reason",
                "verbose_name_plural": "Application Amendment Reasons",
            },
        ),
        migrations.CreateModel(
            name="ApplicationFee",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("send_invoice", models.BooleanField(default=False)),
                ("confirmation_sent", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("expiry_time", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "payment_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Internet booking"),
                            (1, "Reception booking"),
                            (2, "Black booking"),
                            (3, "Temporary reservation"),
                            (4, "No payment"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "cost",
                    models.DecimalField(decimal_places=2, default="0.00", max_digits=8),
                ),
                ("created_by", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("order", models.PositiveSmallIntegerField(default=0)),
                ("visible", models.BooleanField(default=True)),
                (
                    "application_fee",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Application Fee",
                    ),
                ),
                ("oracle_code_application", models.CharField(max_length=50)),
                ("oracle_code_licence", models.CharField(max_length=50)),
                ("is_gst_exempt", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Approval",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lodgement_number",
                    models.CharField(blank=True, default="", max_length=9),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("current", "Current"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                            ("surrendered", "Surrendered"),
                            ("suspended", "Suspended"),
                            ("extended", "extended"),
                            ("awaiting_payment", "Awaiting Payment"),
                        ],
                        default="current",
                        max_length=40,
                    ),
                ),
                ("renewal_sent", models.BooleanField(default=False)),
                ("issue_date", models.DateTimeField()),
                ("original_issue_date", models.DateField(auto_now_add=True)),
                ("start_date", models.DateField()),
                ("expiry_date", models.DateField()),
                ("surrender_details", models.JSONField(blank=True, null=True)),
                ("suspension_details", models.JSONField(blank=True, null=True)),
                ("submitter", models.IntegerField()),
                ("proxy_applicant", models.IntegerField()),
                ("extracted_fields", models.JSONField(blank=True, null=True)),
                ("cancellation_details", models.TextField(blank=True)),
                ("extend_details", models.TextField(blank=True)),
                ("cancellation_date", models.DateField(blank=True, null=True)),
                ("set_to_cancel", models.BooleanField(default=False)),
                ("set_to_suspend", models.BooleanField(default=False)),
                ("set_to_surrender", models.BooleanField(default=False)),
                (
                    "renewal_count",
                    models.PositiveSmallIntegerField(
                        default=0,
                        verbose_name="Number of times an Approval has been renewed",
                    ),
                ),
                ("migrated", models.BooleanField(default=False)),
                ("extended", models.BooleanField(default=False)),
                ("expiry_notice_sent", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("send_invoice", models.BooleanField(default=False)),
                ("confirmation_sent", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("expiry_time", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "booking_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Internet booking"),
                            (1, "Reception booking"),
                            (2, "Black booking"),
                            (3, "Temporary reservation"),
                            (4, "Monthly invoicing"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "admission_number",
                    models.CharField(blank=True, default="", max_length=9),
                ),
                ("created_by", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="ChecklistQuestion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                (
                    "list_type",
                    models.CharField(
                        choices=[
                            ("assessor_list", "Assessor Checklist"),
                            ("referral_list", "Referral Checklist"),
                        ],
                        default="assessor_list",
                        max_length=30,
                        verbose_name="Checklist type",
                    ),
                ),
                (
                    "answer_type",
                    models.CharField(
                        choices=[
                            ("yes_no", "Yes/No type"),
                            ("free_text", "Free text type"),
                        ],
                        default="yes_no",
                        max_length=30,
                        verbose_name="Answer type",
                    ),
                ),
                ("obsolete", models.BooleanField(default=False)),
                ("order", models.PositiveSmallIntegerField(default=1)),
                (
                    "application_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.applicationtype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunicationsLogEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("to", models.TextField(blank=True, verbose_name="To")),
                (
                    "fromm",
                    models.CharField(blank=True, max_length=200, verbose_name="From"),
                ),
                ("cc", models.TextField(blank=True, verbose_name="cc")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone Call"),
                            ("mail", "Mail"),
                            ("person", "In Person"),
                            ("onhold", "On Hold"),
                            ("onhold_remove", "Remove On Hold"),
                            ("with_qaofficer", "With QA Officer"),
                            ("with_qaofficer_completed", "QA Officer Completed"),
                            ("referral_complete", "Referral Completed"),
                        ],
                        default="email",
                        max_length=35,
                    ),
                ),
                ("reference", models.CharField(blank=True, max_length=100)),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Subject / Description"
                    ),
                ),
                ("text", models.TextField(blank=True)),
                ("customer", models.IntegerField()),
                ("staff", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Compliance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lodgement_number",
                    models.CharField(blank=True, default="", max_length=9),
                ),
                ("due_date", models.DateField()),
                ("text", models.TextField(blank=True)),
                (
                    "num_participants",
                    models.SmallIntegerField(
                        blank=True, null=True, verbose_name="Number of participants"
                    ),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("due", "Due"),
                            ("future", "Future"),
                            ("with_assessor", "With Assessor"),
                            ("approved", "Approved"),
                            ("discarded", "Discarded"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "customer_status",
                    models.CharField(
                        choices=[
                            ("due", "Due"),
                            ("future", "Future"),
                            ("with_assessor", "Under Review"),
                            ("approved", "Approved"),
                            ("discarded", "Discarded"),
                        ],
                        default="future",
                        max_length=20,
                    ),
                ),
                ("assigned_to", models.IntegerField()),
                ("lodgement_date", models.DateTimeField(blank=True, null=True)),
                ("submitter", models.IntegerField()),
                ("reminder_sent", models.BooleanField(default=False)),
                ("post_reminder_sent", models.BooleanField(default=False)),
                (
                    "fee_invoice_reference",
                    models.CharField(blank=True, default="", max_length=50, null=True),
                ),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compliances",
                        to="licensing_template.approval",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ComplianceAmendmentReason",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.CharField(max_length=125, verbose_name="Reason")),
            ],
        ),
        migrations.CreateModel(
            name="ComplianceFee",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("send_invoice", models.BooleanField(default=False)),
                ("confirmation_sent", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("expiry_time", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "payment_type",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Internet booking"),
                            (1, "Reception booking"),
                            (2, "Black booking"),
                            (3, "Temporary reservation"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "cost",
                    models.DecimalField(decimal_places=2, default="0.00", max_digits=8),
                ),
                ("created_by", models.IntegerField()),
                (
                    "compliance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="compliance_fees",
                        to="licensing_template.compliance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CompRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject", models.CharField(blank=True, max_length=200)),
                ("text", models.TextField(blank=True)),
                ("officer", models.IntegerField()),
                (
                    "compliance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing_template.compliance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GlobalSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        choices=[
                            ("credit_facility_link", "Credit Facility Link"),
                            ("deed_poll", "Deed poll"),
                            ("deed_poll_filming", "Deed poll Filming"),
                            ("deed_poll_event", "Deed poll Event"),
                            ("online_training_document", "Online Training Document"),
                            ("park_finder_link", "Park Finder Link"),
                            ("fees_and_charges", "Fees and charges link"),
                            ("event_fees_and_charges", "Event Fees and charges link"),
                            (
                                "commercial_filming_handbook",
                                "Commercial Filming Handbook link",
                            ),
                            ("park_stay_link", "Park Stay Link"),
                            (
                                "event_traffic_code_of_practice",
                                "Event traffic code of practice",
                            ),
                            ("trail_section_map", "Trail section map"),
                            ("dwer_application_form", "DWER Application Form"),
                        ],
                        max_length=255,
                    ),
                ),
                ("value", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name_plural": "Global Settings",
            },
        ),
        migrations.CreateModel(
            name="OracleCode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code_type",
                    models.CharField(
                        choices=[
                            ("Commercial operations", "Commercial operations"),
                            ("Filming", "Filming"),
                            ("Event", "Event"),
                        ],
                        default="Commercial operations",
                        max_length=64,
                        verbose_name="Application Type",
                    ),
                ),
                ("code", models.CharField(blank=True, max_length=50)),
                ("archive_date", models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("organisation", models.IntegerField()),
                (
                    "delegates",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, size=None
                    ),
                ),
                ("admin_pin_one", models.CharField(blank=True, max_length=50)),
                ("admin_pin_two", models.CharField(blank=True, max_length=50)),
                ("user_pin_one", models.CharField(blank=True, max_length=50)),
                ("user_pin_two", models.CharField(blank=True, max_length=50)),
                (
                    "bpay_allowed",
                    models.BooleanField(default=False, verbose_name="BPAY Allowed"),
                ),
                ("monthly_invoicing_allowed", models.BooleanField(default=False)),
                (
                    "monthly_invoicing_period",
                    models.SmallIntegerField(
                        default=0,
                        verbose_name="Monthly Invoicing Period (in #days from beginning of the following month)",
                    ),
                ),
                (
                    "monthly_payment_due_period",
                    models.SmallIntegerField(
                        default=20,
                        verbose_name="Monthly Payment Due Period (in #days from Invoicing Date)",
                    ),
                ),
                ("apply_application_discount", models.BooleanField(default=False)),
                (
                    "application_discount",
                    models.FloatField(
                        default=0.0,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                ("apply_licence_discount", models.BooleanField(default=False)),
                (
                    "licence_discount",
                    models.FloatField(
                        default=0.0,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                ("event_training_completed", models.BooleanField(default=False)),
                ("event_training_date", models.DateField(blank=True, null=True)),
                (
                    "charge_once_per_year",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Charge Application Fee once per year from given start date (Charge always if null)",
                    ),
                ),
                (
                    "last_event_application_fee_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="The last date a fee was charged for an Eventi Application",
                    ),
                ),
                (
                    "max_num_months_ahead",
                    models.SmallIntegerField(
                        default=0,
                        verbose_name="Maximum number of months ahead an Event can be booked (Any if equal to zero)",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationAccessGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "members",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, size=None
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Organisation access group",
            },
        ),
        migrations.CreateModel(
            name="OrganisationContact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("declined", "Declined"),
                            ("unlinked", "Unlinked"),
                            ("suspended", "Suspended"),
                            ("contact_form", "ContactForm"),
                        ],
                        default="draft",
                        max_length=40,
                        verbose_name="Status",
                    ),
                ),
                (
                    "user_role",
                    models.CharField(
                        choices=[
                            ("organisation_admin", "Organisation Admin"),
                            ("organisation_user", "Organisation User"),
                            ("consultant", "Consultant"),
                        ],
                        default="organisation_user",
                        max_length=40,
                        verbose_name="Role",
                    ),
                ),
                ("is_admin", models.BooleanField(default=False)),
                ("email", models.EmailField(max_length=254)),
                (
                    "first_name",
                    models.CharField(max_length=128, verbose_name="Given name(s)"),
                ),
                ("last_name", models.CharField(max_length=128)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "mobile_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="mobile number",
                    ),
                ),
                (
                    "fax_number",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="fax number"
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="licensing_template.organisation",
                    ),
                ),
            ],
            options={
                "unique_together": {("organisation", "email")},
            },
        ),
        migrations.CreateModel(
            name="OrganisationRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                (
                    "abn",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="ABN"
                    ),
                ),
                ("requester", models.IntegerField()),
                ("assigned_officer", models.IntegerField()),
                (
                    "identification",
                    models.FileField(
                        blank=True,
                        max_length=512,
                        null=True,
                        upload_to="organisation/requests/%Y/%m/%d",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("with_assessor", "With Assessor"),
                            ("approved", "Approved"),
                            ("declined", "Declined"),
                        ],
                        default="with_assessor",
                        max_length=100,
                    ),
                ),
                ("lodgement_date", models.DateTimeField(auto_now_add=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("employee", "Employee"),
                            ("consultant", "Consultant"),
                        ],
                        default="employee",
                        max_length=100,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Proposal",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "proposal_type",
                    models.CharField(
                        choices=[
                            ("new_proposal", "New Application"),
                            ("amendment", "Amendment"),
                            ("renewal", "Renewal"),
                            ("external", "External"),
                        ],
                        default="new_proposal",
                        max_length=40,
                        verbose_name="Application Status Type",
                    ),
                ),
                ("data", models.JSONField(blank=True, null=True)),
                ("assessor_data", models.JSONField(blank=True, null=True)),
                ("comment_data", models.JSONField(blank=True, null=True)),
                ("schema", models.JSONField()),
                ("proposed_issuance_approval", models.JSONField(blank=True, null=True)),
                (
                    "customer_status",
                    models.CharField(
                        choices=[
                            ("temp", "Temporary"),
                            ("draft", "Draft"),
                            ("with_assessor", "Under Review"),
                            ("amendment_required", "Amendment Required"),
                            ("approved", "Approved"),
                            ("declined", "Declined"),
                            ("discarded", "Discarded"),
                            ("partially_approved", "Partially Approved"),
                            ("partially_declined", "Partially Declined"),
                            ("awaiting_payment", "Awaiting Payment"),
                        ],
                        default="draft",
                        max_length=40,
                        verbose_name="Customer Status",
                    ),
                ),
                (
                    "lodgement_number",
                    models.CharField(blank=True, default="", max_length=9),
                ),
                ("lodgement_sequence", models.IntegerField(blank=True, default=0)),
                ("lodgement_date", models.DateTimeField(blank=True, null=True)),
                ("proxy_applicant", models.IntegerField()),
                ("submitter", models.IntegerField()),
                ("assigned_officer", models.IntegerField()),
                ("assigned_approver", models.IntegerField()),
                ("approved_by", models.IntegerField()),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("temp", "Temporary"),
                            ("draft", "Draft"),
                            ("with_assessor", "With Assessor"),
                            ("with_district_assessor", "With District Assessor"),
                            ("on_hold", "On Hold"),
                            ("with_qa_officer", "With QA Officer"),
                            ("with_referral", "With Referral"),
                            (
                                "with_assessor_requirements",
                                "With Assessor (Requirements)",
                            ),
                            ("with_approver", "With Approver"),
                            ("renewal", "Renewal"),
                            ("licence_amendment", "Licence Amendment"),
                            (
                                "awaiting_applicant_respone",
                                "Awaiting Applicant Response",
                            ),
                            (
                                "awaiting_assessor_response",
                                "Awaiting Assessor Response",
                            ),
                            ("awaiting_responses", "Awaiting Responses"),
                            ("ready_for_conditions", "Ready for Conditions"),
                            ("ready_to_issue", "Ready to Issue"),
                            ("approved", "Approved"),
                            ("declined", "Declined"),
                            ("discarded", "Discarded"),
                            ("partially_approved", "Partially Approved"),
                            ("partially_declined", "Partially Declined"),
                            ("awaiting_payment", "Awaiting Payment"),
                        ],
                        default="draft",
                        max_length=30,
                        verbose_name="Processing Status",
                    ),
                ),
                (
                    "prev_processing_status",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "id_check_status",
                    models.CharField(
                        choices=[
                            ("not_checked", "Not Checked"),
                            ("awaiting_update", "Awaiting Update"),
                            ("updated", "Updated"),
                            ("accepted", "Accepted"),
                        ],
                        default="not_checked",
                        max_length=30,
                        verbose_name="Identification Check Status",
                    ),
                ),
                (
                    "compliance_check_status",
                    models.CharField(
                        choices=[
                            ("not_checked", "Not Checked"),
                            ("awaiting_returns", "Awaiting Returns"),
                            ("completed", "Completed"),
                            ("accepted", "Accepted"),
                        ],
                        default="not_checked",
                        max_length=30,
                        verbose_name="Return Check Status",
                    ),
                ),
                (
                    "character_check_status",
                    models.CharField(
                        choices=[
                            ("not_checked", "Not Checked"),
                            ("accepted", "Accepted"),
                        ],
                        default="not_checked",
                        max_length=30,
                        verbose_name="Character Check Status",
                    ),
                ),
                (
                    "review_status",
                    models.CharField(
                        choices=[
                            ("not_reviewed", "Not Reviewed"),
                            ("awaiting_amendments", "Awaiting Amendments"),
                            ("amended", "Amended"),
                            ("accepted", "Accepted"),
                        ],
                        default="not_reviewed",
                        max_length=30,
                        verbose_name="Review Status",
                    ),
                ),
                ("proposed_decline_status", models.BooleanField(default=False)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "approval_level",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Activity matrix approval level",
                    ),
                ),
                ("approval_comment", models.TextField(blank=True)),
                ("migrated", models.BooleanField(default=False)),
                (
                    "application_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="licensing_template.applicationtype",
                    ),
                ),
                (
                    "approval",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.approval",
                    ),
                ),
            ],
            options={
                "verbose_name": "Application",
                "verbose_name_plural": "Applications",
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProposalApplicantDetails",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(blank=True, default="", max_length=24)),
            ],
        ),
        migrations.CreateModel(
            name="ProposalApproverGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "members",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, size=None
                    ),
                ),
                ("default", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Application Approver Group",
                "verbose_name_plural": "Application Approver Group",
            },
        ),
        migrations.CreateModel(
            name="ProposalAssessment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("completed", models.BooleanField(default=False)),
                ("submitter", models.IntegerField()),
                ("referral_assessment", models.BooleanField(default=False)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProposalAssessorGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "members",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, size=None
                    ),
                ),
                ("default", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Application Assessor Group",
                "verbose_name_plural": "Application Assessor Group",
            },
        ),
        migrations.CreateModel(
            name="ProposalDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_proposal_doc_filename,
                    ),
                ),
                ("input_name", models.CharField(blank=True, max_length=255, null=True)),
                ("can_delete", models.BooleanField(default=True)),
                ("can_hide", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(default=False)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
            options={
                "verbose_name": "Application Document",
            },
        ),
        migrations.CreateModel(
            name="ProposalRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject", models.CharField(blank=True, max_length=200)),
                ("text", models.TextField(blank=True)),
                ("officer", models.IntegerField()),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposalrequest_set",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProposalRequirement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(db_index=True, editable=False)),
                ("free_requirement", models.TextField(blank=True, null=True)),
                ("standard", models.BooleanField(default=True)),
                ("due_date", models.DateField(blank=True, null=True)),
                ("recurrence", models.BooleanField(default=False)),
                (
                    "recurrence_pattern",
                    models.SmallIntegerField(
                        choices=[(1, "Weekly"), (2, "Monthly"), (3, "Yearly")],
                        default=1,
                    ),
                ),
                ("recurrence_schedule", models.IntegerField(blank=True, null=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("copied_for_renewal", models.BooleanField(default=False)),
                ("require_due_date", models.BooleanField(default=False)),
                ("notification_only", models.BooleanField(default=False)),
                (
                    "copied_from",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.proposalrequirement",
                    ),
                ),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requirements",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QAOfficerDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_qaofficer_doc_filename,
                    ),
                ),
                ("input_name", models.CharField(blank=True, max_length=255, null=True)),
                ("can_delete", models.BooleanField(default=True)),
                ("visible", models.BooleanField(default=True)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qaofficer_documents",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QAOfficerGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, unique=True)),
                (
                    "members",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, size=None
                    ),
                ),
                ("default", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "QA group",
                "verbose_name_plural": "QA group",
            },
        ),
        migrations.CreateModel(
            name="Referral",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lodged_on", models.DateTimeField(auto_now_add=True)),
                ("sent_by", models.IntegerField()),
                ("referral", models.IntegerField()),
                ("linked", models.BooleanField(default=False)),
                (
                    "sent_from",
                    models.SmallIntegerField(
                        choices=[(1, "Sent From Assessor"), (2, "Sent From Referral")],
                        default=1,
                    ),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("with_referral", "Awaiting"),
                            ("recalled", "Recalled"),
                            ("completed", "Completed"),
                        ],
                        default="with_referral",
                        max_length=30,
                        verbose_name="Processing Status",
                    ),
                ),
                ("text", models.TextField(blank=True)),
                ("referral_text", models.TextField(blank=True)),
                ("assigned_officer", models.IntegerField()),
            ],
            options={
                "ordering": ("-lodged_on",),
            },
        ),
        migrations.CreateModel(
            name="ReferralRecipientGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, unique=True)),
                (
                    "members",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, size=None
                    ),
                ),
            ],
            options={
                "verbose_name": "Referral group",
                "verbose_name_plural": "Referral groups",
            },
        ),
        migrations.CreateModel(
            name="RequiredDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="SystemMaintenance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
            ],
            options={
                "verbose_name_plural": "System maintenance",
            },
        ),
        migrations.CreateModel(
            name="UserSystemSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("one_row_per_park", models.BooleanField(default=False)),
                ("user", models.IntegerField(unique=True)),
                ("event_training_completed", models.BooleanField(default=False)),
                ("event_training_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "User System Settings",
            },
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "proposalrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.proposalrequest",
                    ),
                ),
                ("assigned_assessor", models.IntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("awaiting_assessment", "Awaiting Assessment"),
                            ("assessed", "Assessed"),
                            ("assessment_expired", "Assessment Period Expired"),
                        ],
                        default="awaiting_assessment",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("date_last_reminded", models.DateField(blank=True, null=True)),
                ("comment", models.TextField(blank=True)),
                ("purpose", models.TextField(blank=True)),
            ],
            bases=("licensing_template.proposalrequest",),
        ),
        migrations.CreateModel(
            name="ComplianceRequest",
            fields=[
                (
                    "proposalrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.proposalrequest",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            (
                                "outstanding",
                                "There are currently outstanding returns for the previous licence",
                            ),
                            ("other", "Other"),
                        ],
                        default="outstanding",
                        max_length=30,
                        verbose_name="Reason",
                    ),
                ),
            ],
            bases=("licensing_template.proposalrequest",),
        ),
        migrations.CreateModel(
            name="PreviewTempApproval",
            fields=[
                (
                    "approval_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.approval",
                    ),
                ),
            ],
            bases=("licensing_template.approval",),
        ),
        migrations.CreateModel(
            name="RequirementDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_requirement_doc_filename,
                    ),
                ),
                ("input_name", models.CharField(blank=True, max_length=255, null=True)),
                ("can_delete", models.BooleanField(default=True)),
                ("visible", models.BooleanField(default=True)),
                (
                    "requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requirement_documents",
                        to="licensing_template.proposalrequirement",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReferralDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_referral_doc_filename,
                    ),
                ),
                ("input_name", models.CharField(blank=True, max_length=255, null=True)),
                ("can_delete", models.BooleanField(default=True)),
                (
                    "referral",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="referral_documents",
                        to="licensing_template.referral",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="referral",
            name="document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="referral_document",
                to="licensing_template.referraldocument",
            ),
        ),
        migrations.AddField(
            model_name="referral",
            name="proposal",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="referrals",
                to="licensing_template.proposal",
            ),
        ),
        migrations.AddField(
            model_name="referral",
            name="referral_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="licensing_template_referral_groups",
                to="licensing_template.referralrecipientgroup",
            ),
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                ("answer_one", models.CharField(blank=True, max_length=200)),
                ("answer_two", models.CharField(blank=True, max_length=200)),
                ("answer_three", models.CharField(blank=True, max_length=200)),
                ("answer_four", models.CharField(blank=True, max_length=200)),
                (
                    "correct_answer",
                    models.CharField(
                        choices=[
                            ("answer_one", "Answer one"),
                            ("answer_two", "Answer two"),
                            ("answer_three", "Answer three"),
                            ("answer_four", "Answer four"),
                        ],
                        default="answer_one",
                        max_length=40,
                        verbose_name="Correct Answer",
                    ),
                ),
                (
                    "application_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.applicationtype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QAOfficerReferral",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lodged_on", models.DateTimeField(auto_now_add=True)),
                ("sent_by", models.IntegerField()),
                ("qaofficer", models.IntegerField()),
                ("linked", models.BooleanField(default=False)),
                (
                    "sent_from",
                    models.SmallIntegerField(
                        choices=[(1, "Sent From Assessor"), (2, "Sent From Referral")],
                        default=1,
                    ),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("with_qaofficer", "Awaiting"),
                            ("recalled", "Recalled"),
                            ("completed", "Completed"),
                        ],
                        default="with_qaofficer",
                        max_length=30,
                        verbose_name="Processing Status",
                    ),
                ),
                ("text", models.TextField(blank=True)),
                ("qaofficer_text", models.TextField(blank=True)),
                (
                    "document",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qaofficer_referral_document",
                        to="licensing_template.qaofficerdocument",
                    ),
                ),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qaofficer_referrals",
                        to="licensing_template.proposal",
                    ),
                ),
                (
                    "qaofficer_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="qaofficer_groups",
                        to="licensing_template.qaofficergroup",
                    ),
                ),
            ],
            options={
                "ordering": ("-lodged_on",),
            },
        ),
        migrations.CreateModel(
            name="ProposalUserAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("who", models.IntegerField()),
                ("when", models.DateTimeField(auto_now_add=True)),
                ("what", models.TextField()),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_logs",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
            options={
                "ordering": ("-when",),
            },
        ),
        migrations.CreateModel(
            name="ProposalStandardRequirement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("code", models.CharField(max_length=10, unique=True)),
                ("obsolete", models.BooleanField(default=False)),
                ("participant_number_required", models.BooleanField(default=False)),
                ("default", models.BooleanField(default=False)),
                (
                    "application_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.applicationtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Application Standard Requirement",
                "verbose_name_plural": "Application Standard Requirements",
            },
        ),
        migrations.AddField(
            model_name="proposalrequirement",
            name="referral_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="requirement_referral_groups",
                to="licensing_template.referralrecipientgroup",
            ),
        ),
        migrations.AddField(
            model_name="proposalrequirement",
            name="standard_requirement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="licensing_template.proposalstandardrequirement",
            ),
        ),
        migrations.CreateModel(
            name="ProposalRequiredDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_proposal_required_doc_filename,
                    ),
                ),
                ("input_name", models.CharField(blank=True, max_length=255, null=True)),
                ("can_delete", models.BooleanField(default=True)),
                ("can_hide", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(default=False)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="required_documents",
                        to="licensing_template.proposal",
                    ),
                ),
                (
                    "required_doc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals",
                        to="licensing_template.requireddocument",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProposalOtherDetails",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_licence_period",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("2_months", "2 months"),
                            ("1_year", "1 Year"),
                            ("3_year", "3 Years"),
                            ("5_year", "5 Years"),
                            ("7_year", "7 Years"),
                            ("10_year", "10 Years"),
                        ],
                        max_length=40,
                        null=True,
                        verbose_name="Preferred licence period",
                    ),
                ),
                ("nominated_start_date", models.DateField(blank=True, null=True)),
                ("insurance_expiry", models.DateField(blank=True, null=True)),
                ("other_comments", models.TextField(blank=True)),
                ("credit_fees", models.BooleanField(default=False)),
                ("credit_docket_books", models.BooleanField(default=False)),
                (
                    "docket_books_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Docket books number"
                    ),
                ),
                (
                    "proposal",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="other_details",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProposalOnHold",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("officer", models.IntegerField()),
                ("comment", models.TextField(blank=True)),
                (
                    "documents",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="onhold_documents",
                        to="licensing_template.proposaldocument",
                    ),
                ),
                (
                    "proposal",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProposalDeclinedDetails",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("officer", models.IntegerField()),
                ("reason", models.TextField(blank=True)),
                ("cc_email", models.TextField(null=True)),
                (
                    "proposal",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProposalAssessmentAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer", models.BooleanField(null=True)),
                (
                    "text_answer",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="answers",
                        to="licensing_template.proposalassessment",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="licensing_template.checklistquestion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Assessment answer",
                "verbose_name_plural": "Assessment answers",
            },
        ),
        migrations.AddField(
            model_name="proposalassessment",
            name="referral",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="assessment",
                to="licensing_template.referral",
            ),
        ),
        migrations.AddField(
            model_name="proposalassessment",
            name="referral_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="referral_assessment",
                to="licensing_template.referralrecipientgroup",
            ),
        ),
        migrations.AddField(
            model_name="proposal",
            name="approval_level_document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approval_level_document",
                to="licensing_template.proposaldocument",
            ),
        ),
        migrations.AddField(
            model_name="proposal",
            name="org_applicant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="org_applications",
                to="licensing_template.organisation",
            ),
        ),
        migrations.AddField(
            model_name="proposal",
            name="previous_application",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="licensing_template.proposal",
            ),
        ),
        migrations.CreateModel(
            name="OrganisationRequestUserAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("who", models.IntegerField()),
                ("when", models.DateTimeField(auto_now_add=True)),
                ("what", models.TextField()),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_logs",
                        to="licensing_template.organisationrequest",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationRequestDeclinedDetails",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("officer", models.IntegerField()),
                ("reason", models.TextField(blank=True)),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing_template.organisationrequest",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationContactDeclinedDetails",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("officer", models.IntegerField()),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing_template.organisationcontact",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("who", models.IntegerField()),
                ("when", models.DateTimeField(auto_now_add=True)),
                ("what", models.TextField()),
                (
                    "organisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_logs",
                        to="licensing_template.organisation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OnHoldDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_onhold_doc_filename,
                    ),
                ),
                ("input_name", models.CharField(blank=True, max_length=255, null=True)),
                ("can_delete", models.BooleanField(default=True)),
                ("visible", models.BooleanField(default=True)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="onhold_documents",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComplianceUserAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("who", models.IntegerField()),
                ("when", models.DateTimeField(auto_now_add=True)),
                ("what", models.TextField()),
                (
                    "compliance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_logs",
                        to="licensing_template.compliance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ComplianceFeeInvoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invoice_reference",
                    models.CharField(blank=True, default="", max_length=50, null=True),
                ),
                (
                    "compliance_fee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="compliance_fee_invoices",
                        to="licensing_template.compliancefee",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ComplianceDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.compliances.models.update_proposal_complaince_filename,
                    ),
                ),
                ("can_delete", models.BooleanField(default=True)),
                (
                    "compliance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.compliance",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="compliance",
            name="proposal",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="compliances",
                to="licensing_template.proposal",
            ),
        ),
        migrations.AddField(
            model_name="compliance",
            name="requirement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="compliance_requirement",
                to="licensing_template.proposalrequirement",
            ),
        ),
        migrations.CreateModel(
            name="BookingInvoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invoice_reference",
                    models.CharField(blank=True, default="", max_length=50, null=True),
                ),
                (
                    "payment_method",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Credit Card"),
                            (1, "BPAY"),
                            (2, "Monthly Invoicing"),
                            (3, "Other (Cash/Cheque)"),
                        ],
                        default=0,
                    ),
                ),
                ("deferred_payment_date", models.DateField(blank=True, null=True)),
                ("payment_due_notification_sent", models.BooleanField(default=False)),
                (
                    "property_cache",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="invoices",
                        to="licensing_template.booking",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="booking",
            name="proposal",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="bookings",
                to="licensing_template.proposal",
            ),
        ),
        migrations.CreateModel(
            name="ApprovalUserAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("who", models.IntegerField()),
                ("when", models.DateTimeField(auto_now_add=True)),
                ("what", models.TextField()),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_logs",
                        to="licensing_template.approval",
                    ),
                ),
            ],
            options={
                "ordering": ("-when",),
            },
        ),
        migrations.CreateModel(
            name="ApprovalDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.approvals.models.update_approval_doc_filename,
                    ),
                ),
                ("can_delete", models.BooleanField(default=True)),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.approval",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="approval",
            name="cover_letter_document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cover_letter_document",
                to="licensing_template.approvaldocument",
            ),
        ),
        migrations.AddField(
            model_name="approval",
            name="current_proposal",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approvals",
                to="licensing_template.proposal",
            ),
        ),
        migrations.AddField(
            model_name="approval",
            name="licence_document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="licence_document",
                to="licensing_template.approvaldocument",
            ),
        ),
        migrations.AddField(
            model_name="approval",
            name="org_applicant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="org_approvals",
                to="licensing_template.organisation",
            ),
        ),
        migrations.AddField(
            model_name="approval",
            name="renewal_document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="renewal_document",
                to="licensing_template.approvaldocument",
            ),
        ),
        migrations.AddField(
            model_name="approval",
            name="replaced_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="licensing_template.approval",
            ),
        ),
        migrations.CreateModel(
            name="ApplicationFeeInvoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invoice_reference",
                    models.CharField(blank=True, default="", max_length=50, null=True),
                ),
                (
                    "application_fee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="application_fee_invoices",
                        to="licensing_template.applicationfee",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationFeeDiscount",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "discount_type",
                    models.CharField(
                        choices=[(0, "Discount application"), (1, "Discount licence")],
                        max_length=40,
                    ),
                ),
                (
                    "discount",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)]
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("user", models.IntegerField()),
                ("reset_date", models.DateTimeField(blank=True, null=True)),
                (
                    "proposal",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fee_discounts",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="applicationfee",
            name="proposal",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="application_fees",
                to="licensing_template.proposal",
            ),
        ),
        migrations.CreateModel(
            name="UserDelegation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user", models.IntegerField()),
                (
                    "organisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licensing_template.organisation",
                    ),
                ),
            ],
            options={
                "unique_together": {("organisation", "user")},
            },
        ),
        migrations.CreateModel(
            name="ProposalType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[("T Class", "T Class")],
                        default="T Class",
                        max_length=64,
                        verbose_name="Application name (eg. T Class, Filming, Event, E Class)",
                    ),
                ),
                ("version", models.SmallIntegerField(default=1)),
                (
                    "replaced_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="licensing_template.proposaltype",
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "version")},
            },
        ),
        migrations.CreateModel(
            name="ProposalLogEntry",
            fields=[
                (
                    "communicationslogentry_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.communicationslogentry",
                    ),
                ),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comms_logs",
                        to="licensing_template.proposal",
                    ),
                ),
            ],
            bases=("licensing_template.communicationslogentry",),
        ),
        migrations.CreateModel(
            name="ProposalLogDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.proposals.models.update_proposal_comms_log_filename,
                    ),
                ),
                (
                    "log_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.proposallogentry",
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="proposalassessment",
            unique_together={("proposal", "referral_group")},
        ),
        migrations.CreateModel(
            name="OrganisationRequestLogEntry",
            fields=[
                (
                    "communicationslogentry_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.communicationslogentry",
                    ),
                ),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comms_logs",
                        to="licensing_template.organisationrequest",
                    ),
                ),
            ],
            bases=("licensing_template.communicationslogentry",),
        ),
        migrations.CreateModel(
            name="OrganisationRequestLogDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.organisations.models.update_organisation_request_comms_log_filename,
                    ),
                ),
                (
                    "log_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.organisationrequestlogentry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationLogEntry",
            fields=[
                (
                    "communicationslogentry_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.communicationslogentry",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comms_logs",
                        to="licensing_template.organisation",
                    ),
                ),
            ],
            bases=("licensing_template.communicationslogentry",),
        ),
        migrations.CreateModel(
            name="OrganisationLogDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.organisations.models.update_organisation_comms_log_filename,
                    ),
                ),
                (
                    "log_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.organisationlogentry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HelpPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", ckeditor.fields.RichTextField()),
                (
                    "description",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "help_type",
                    models.SmallIntegerField(
                        choices=[(1, "External"), (2, "Internal")],
                        default=1,
                        verbose_name="Help Type",
                    ),
                ),
                ("version", models.SmallIntegerField(default=1)),
                (
                    "application_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.applicationtype",
                    ),
                ),
            ],
            options={
                "unique_together": {("application_type", "help_type", "version")},
            },
        ),
        migrations.CreateModel(
            name="ComplianceLogEntry",
            fields=[
                (
                    "communicationslogentry_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.communicationslogentry",
                    ),
                ),
                (
                    "compliance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comms_logs",
                        to="licensing_template.compliance",
                    ),
                ),
            ],
            bases=("licensing_template.communicationslogentry",),
        ),
        migrations.CreateModel(
            name="ComplianceLogDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        upload_to=licensing_template.components.compliances.models.update_compliance_comms_log_filename,
                    ),
                ),
                (
                    "log_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.compliancelogentry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ComplianceAmendmentRequest",
            fields=[
                (
                    "comprequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.comprequest",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("requested", "Requested"), ("amended", "Amended")],
                        default="requested",
                        max_length=30,
                        verbose_name="Status",
                    ),
                ),
                (
                    "reason",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.complianceamendmentreason",
                    ),
                ),
            ],
            bases=("licensing_template.comprequest",),
        ),
        migrations.CreateModel(
            name="ApprovalLogEntry",
            fields=[
                (
                    "communicationslogentry_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.communicationslogentry",
                    ),
                ),
                (
                    "approval",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comms_logs",
                        to="licensing_template.approval",
                    ),
                ),
            ],
            bases=("licensing_template.communicationslogentry",),
        ),
        migrations.CreateModel(
            name="ApprovalLogDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=255, verbose_name="name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("uploaded_date", models.DateTimeField(auto_now_add=True)),
                (
                    "_file",
                    models.FileField(
                        max_length=512,
                        null=True,
                        upload_to=licensing_template.components.approvals.models.update_approval_comms_log_filename,
                    ),
                ),
                (
                    "log_entry",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="licensing_template.approvallogentry",
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="approval",
            unique_together={("lodgement_number", "issue_date")},
        ),
        migrations.CreateModel(
            name="AmendmentRequest",
            fields=[
                (
                    "proposalrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="licensing_template.proposalrequest",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("requested", "Requested"), ("amended", "Amended")],
                        default="requested",
                        max_length=30,
                        verbose_name="Status",
                    ),
                ),
                (
                    "reason",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="licensing_template.amendmentreason",
                    ),
                ),
            ],
            bases=("licensing_template.proposalrequest",),
        ),
    ]
